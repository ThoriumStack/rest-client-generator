using System.Collections.Generic;
using System.Threading.Tasks;
using Flurl;
using Flurl.Http;
using System;
using MyBucks.Core.ApiGateway.ApiClient;
using MyBucks.Core.ApiGateway.ApiClient.Models;
using MyBucks.Core.DataTools.Models;
using MyBucks.Core.Model;
 {% for include in Includes %}
   using {{ include }};
 {% endfor %}

namespace {{ NamespaceName }}
{
    public class {{ ClassName }} : MyBucksApiClient
    {
        private string _baseUrl;

        public {{ ClassName }}(string baseUrl, TokenAuthenticationCredentials tokenAuthenticationCredentials,
            string context) : base(baseUrl, tokenAuthenticationCredentials, context) 
        {
            _baseUrl = baseUrl;
        }
        
        {% for restCall in Calls %}
          public async Task<{{ restCall.return_type }}> {{ restCall.Name }}(
            {%- for parm in restCall.function_parameters -%}
              {{ parm.parameter_type }} {{ parm.parameter_name }} 
              {% if forloop.last == false %}, {% endif %}
            {%- endfor -%}) 
            {
               var result = await GetRequest().AppendPathSegment("/{{ ControllerRoute }}")
               {%- if restCall.controller_route != "" -%}
                  .AppendPathSegment("/{{ restCall.controller_route }}")
               {%- endif -%}
               {%- for parm in restCall.Parameters -%}
                 {% if (restCall.Verb == "Post" or restCall.Verb == "Patch") && parm.HttpParameterType == "body"  %}
                   .{{ restCall.verb}}JsonAsync({{ parm.parameter_name }})
                   .ReceiveJson<{{ restCall.return_type }}>();
                 {% endif %}
                  {% if parm.http_parameter_type == "query" %}
                   .SetQueryParam("{{ parm.parameter_name }}", {{ parm.parameter_name }})
                 {% endif %}
                 {% if parm.http_parameter_type == "uri" %}
                   {% if parm.fixed %}
                     .AppendPathSegment("{{ parm.parameter_name }}")
                   {% else %}
                     .AppendPathSegment({{ parm.parameter_name }})
                   {% endif %}
                   
                 {% endif %}
               {%- endfor -%}
               {% if restCall.Verb == "Delete" %}
                   .{{ restCall.verb }}Async()
                   .ReceiveJson<{{ restCall.return_type }}>();
               {% endif %} 
               {% if restCall.Verb == "Get" %}
                   .{{ restCall.verb }}JsonAsync();
               {% endif %}  
               return result;
          }
        {% endfor %}
        
        
    }
}